# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'gui_chip_management.ui'
##
## Created by: Qt User Interface Compiler version 6.7.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QHBoxLayout, QMainWindow, QMenu,
    QMenuBar, QSizePolicy, QTabWidget, QWidget)

class Ui_Chip_management(object):
    def setupUi(self, Chip_management):
        if not Chip_management.objectName():
            Chip_management.setObjectName(u"Chip_management")
        Chip_management.setEnabled(True)
        Chip_management.setMinimumSize(QSize(710, 450))
        icon = QIcon()
        icon.addFile(u"../../../../.designer/images/logoOpale_ico.ico", QSize(), QIcon.Normal, QIcon.Off)
        Chip_management.setWindowIcon(icon)
        Chip_management.setLayoutDirection(Qt.LeftToRight)
        Chip_management.setStyleSheet(u"")
        self.actionVersions = QAction(Chip_management)
        self.actionVersions.setObjectName(u"actionVersions")
        self.actionDatabase_file = QAction(Chip_management)
        self.actionDatabase_file.setObjectName(u"actionDatabase_file")
        self.actionError_log_file = QAction(Chip_management)
        self.actionError_log_file.setObjectName(u"actionError_log_file")
        self.actionUC = QAction(Chip_management)
        self.actionUC.setObjectName(u"actionUC")
        self.actionParallel = QAction(Chip_management)
        self.actionParallel.setObjectName(u"actionParallel")
        self.actionI2C = QAction(Chip_management)
        self.actionI2C.setObjectName(u"actionI2C")
        self.actionSPI = QAction(Chip_management)
        self.actionSPI.setObjectName(u"actionSPI")
        self.actionHardsploit_website = QAction(Chip_management)
        self.actionHardsploit_website.setObjectName(u"actionHardsploit_website")
        self.actionAdd = QAction(Chip_management)
        self.actionAdd.setObjectName(u"actionAdd")
        self.actionEdit = QAction(Chip_management)
        self.actionEdit.setObjectName(u"actionEdit")
        self.actionDelete = QAction(Chip_management)
        self.actionDelete.setObjectName(u"actionDelete")
        self.actionDisplay_firmware = QAction(Chip_management)
        self.actionDisplay_firmware.setObjectName(u"actionDisplay_firmware")
        self.actionWire = QAction(Chip_management)
        self.actionWire.setObjectName(u"actionWire")
        self.actionSignal_Mapper = QAction(Chip_management)
        self.actionSignal_Mapper.setObjectName(u"actionSignal_Mapper")
        self.actionExport = QAction(Chip_management)
        self.actionExport.setObjectName(u"actionExport")
        self.actionImport_2 = QAction(Chip_management)
        self.actionImport_2.setObjectName(u"actionImport_2")
        self.actionTemplate = QAction(Chip_management)
        self.actionTemplate.setObjectName(u"actionTemplate")
        self.actionSWD = QAction(Chip_management)
        self.actionSWD.setObjectName(u"actionSWD")
        self.actionUART = QAction(Chip_management)
        self.actionUART.setObjectName(u"actionUART")
        self.action = QAction(Chip_management)
        self.action.setObjectName(u"action")
        self.cl_main = QWidget(Chip_management)
        self.cl_main.setObjectName(u"cl_main")
        self.horizontalLayout = QHBoxLayout(self.cl_main)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.tabWidget = QTabWidget(self.cl_main)
        self.tabWidget.setObjectName(u"tabWidget")
        self.tabWidget.setEnabled(True)
        self.tabWidget.setMouseTracking(False)
        self.tabWidget.setAutoFillBackground(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tab = QWidget()
        self.tab.setObjectName(u"tab")
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QWidget()
        self.tab_2.setObjectName(u"tab_2")
        self.tab_2.setEnabled(False)
        self.tabWidget.addTab(self.tab_2, "")

        self.horizontalLayout.addWidget(self.tabWidget)

        Chip_management.setCentralWidget(self.cl_main)
        self.menubar = QMenuBar(Chip_management)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 710, 23))
        self.menuMenu = QMenu(self.menubar)
        self.menuMenu.setObjectName(u"menuMenu")
        self.menuUpload_firmware = QMenu(self.menuMenu)
        self.menuUpload_firmware.setObjectName(u"menuUpload_firmware")
        self.menuComponent = QMenu(self.menuMenu)
        self.menuComponent.setObjectName(u"menuComponent")
        self.menuAbout = QMenu(self.menubar)
        self.menuAbout.setObjectName(u"menuAbout")
        self.menuPath = QMenu(self.menuAbout)
        self.menuPath.setObjectName(u"menuPath")
        Chip_management.setMenuBar(self.menubar)

        self.menubar.addAction(self.menuMenu.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.menuMenu.addAction(self.menuUpload_firmware.menuAction())
        self.menuMenu.addAction(self.menuComponent.menuAction())
        self.menuMenu.addAction(self.actionSignal_Mapper)
        self.menuUpload_firmware.addAction(self.actionDisplay_firmware)
        self.menuUpload_firmware.addAction(self.actionParallel)
        self.menuUpload_firmware.addAction(self.actionI2C)
        self.menuUpload_firmware.addAction(self.actionSPI)
        self.menuUpload_firmware.addAction(self.actionSWD)
        self.menuUpload_firmware.addAction(self.actionUART)
        self.menuUpload_firmware.addSeparator()
        self.menuUpload_firmware.addAction(self.actionUC)
        self.menuComponent.addAction(self.actionAdd)
        self.menuComponent.addAction(self.actionEdit)
        self.menuComponent.addAction(self.actionWire)
        self.menuComponent.addAction(self.actionDelete)
        self.menuComponent.addAction(self.actionTemplate)
        self.menuComponent.addAction(self.actionImport_2)
        self.menuComponent.addAction(self.actionExport)
        self.menuAbout.addAction(self.actionHardsploit_website)
        self.menuAbout.addAction(self.actionVersions)
        self.menuAbout.addAction(self.menuPath.menuAction())
        self.menuPath.addAction(self.actionDatabase_file)
        self.menuPath.addAction(self.actionError_log_file)

        self.retranslateUi(Chip_management)
        self.actionError_log_file.triggered.connect(Chip_management.get_log_path)
        self.actionHardsploit_website.triggered.connect(Chip_management.get_hardsploit_website)
        self.actionI2C.triggered.connect(Chip_management.set_firmware)
        self.actionParallel.triggered.connect(Chip_management.set_firmware)
        self.actionSPI.triggered.connect(Chip_management.set_firmware)
        self.actionUC.triggered.connect(Chip_management.update_uc_firmware)
        self.actionVersions.triggered.connect(Chip_management.get_hardsploit_versions)
        self.actionDatabase_file.triggered.connect(Chip_management.get_db_path)
        self.actionDisplay_firmware.triggered.connect(Chip_management.display_current_firmware)
        self.actionAdd.triggered.connect(Chip_management.add_chip)
        self.actionSignal_Mapper.triggered.connect(Chip_management.open_signal_mapper)
        self.actionExport.triggered.connect(Chip_management.export)
        self.actionImport_2.triggered.connect(Chip_management.import2)
        self.actionTemplate.triggered.connect(Chip_management.add_chip)
        self.actionSWD.triggered.connect(Chip_management.set_firmware)
        self.actionUART.triggered.connect(Chip_management.set_firmware)

        self.tabWidget.setCurrentIndex(1)


        QMetaObject.connectSlotsByName(Chip_management)
    # setupUi

    def retranslateUi(self, Chip_management):
        Chip_management.setWindowTitle(QCoreApplication.translate("Chip_management", u"Hardsploit - Chip management", None))
        self.actionVersions.setText(QCoreApplication.translate("Chip_management", u"Versions", None))
        self.actionDatabase_file.setText(QCoreApplication.translate("Chip_management", u"Database file", None))
        self.actionError_log_file.setText(QCoreApplication.translate("Chip_management", u"Error log file", None))
        self.actionUC.setText(QCoreApplication.translate("Chip_management", u"Update uC", None))
        self.actionParallel.setText(QCoreApplication.translate("Chip_management", u"Set parallel", None))
        self.actionI2C.setText(QCoreApplication.translate("Chip_management", u"Set I\u00b2C", None))
        self.actionSPI.setText(QCoreApplication.translate("Chip_management", u"Set SPI", None))
        self.actionHardsploit_website.setText(QCoreApplication.translate("Chip_management", u"Hardsploit website", None))
        self.actionAdd.setText(QCoreApplication.translate("Chip_management", u"New", None))
#if QT_CONFIG(shortcut)
        self.actionAdd.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+A", None))
#endif // QT_CONFIG(shortcut)
        self.actionEdit.setText(QCoreApplication.translate("Chip_management", u"Edit", None))
#if QT_CONFIG(shortcut)
        self.actionEdit.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete.setText(QCoreApplication.translate("Chip_management", u"Delete", None))
#if QT_CONFIG(shortcut)
        self.actionDelete.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionDisplay_firmware.setText(QCoreApplication.translate("Chip_management", u"Display current firmware", None))
#if QT_CONFIG(shortcut)
        self.actionDisplay_firmware.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionWire.setText(QCoreApplication.translate("Chip_management", u"Wire", None))
#if QT_CONFIG(shortcut)
        self.actionWire.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionSignal_Mapper.setText(QCoreApplication.translate("Chip_management", u"Signal Mapper", None))
        self.actionExport.setText(QCoreApplication.translate("Chip_management", u"Export", None))
#if QT_CONFIG(shortcut)
        self.actionExport.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionImport_2.setText(QCoreApplication.translate("Chip_management", u"Import", None))
#if QT_CONFIG(shortcut)
        self.actionImport_2.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionTemplate.setText(QCoreApplication.translate("Chip_management", u"Template", None))
#if QT_CONFIG(shortcut)
        self.actionTemplate.setShortcut(QCoreApplication.translate("Chip_management", u"Ctrl+T", None))
#endif // QT_CONFIG(shortcut)
        self.actionSWD.setText(QCoreApplication.translate("Chip_management", u"Set SWD", None))
        self.actionUART.setText(QCoreApplication.translate("Chip_management", u"Set UART", None))
        self.action.setText(QCoreApplication.translate("Chip_management", u"Import DB from older V.", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), QCoreApplication.translate("Chip_management", u"Tab 1", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), QCoreApplication.translate("Chip_management", u"Tab 2", None))
        self.menuMenu.setTitle(QCoreApplication.translate("Chip_management", u"Menu", None))
        self.menuUpload_firmware.setTitle(QCoreApplication.translate("Chip_management", u"Firmware...", None))
        self.menuComponent.setTitle(QCoreApplication.translate("Chip_management", u"Component...", None))
        self.menuAbout.setTitle(QCoreApplication.translate("Chip_management", u"About", None))
        self.menuPath.setTitle(QCoreApplication.translate("Chip_management", u"Path...", None))
    # retranslateUi

